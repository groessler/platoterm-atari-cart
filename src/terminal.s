;
; File generated by cc65 v 2.17 - Git 13fa31a3
;
	.fopt		compiler,"cc65 v 2.17 - Git 13fa31a3"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_memset
	.import		_CurMem
	.import		_TTY
	.import		_ModeBold
	.import		_Rotate
	.import		_Reverse
	.import		_CurMode
	.export		_terminal_init
	.export		_terminal_initial_position
	.export		_terminal_set_tty
	.export		_terminal_set_plato
	.export		_terminal_char_load
	.import		_screen_clear
	.import		_CharWide
	.import		_CharHigh
	.import		_TTYLoc
	.export		_BTAB
	.export		_BTAB_5
	.export		_TAB_0_5
	.export		_TAB_0_5i
	.export		_TAB_0_4
	.export		_TAB_0_25
	.export		_PIX_THRESH
	.import		_fontm23

.segment	"RODATA"

_BTAB:
	.byte	$80
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$01
_BTAB_5:
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$20
	.byte	$20
	.byte	$40
	.byte	$80
	.byte	$80
_TAB_0_5:
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
_TAB_0_5i:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$05
	.byte	$05
	.byte	$05
_TAB_0_4:
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$04
_TAB_0_25:
	.byte	$00
	.byte	$05
	.byte	$0A
	.byte	$0F
	.byte	$14
	.byte	$19
_PIX_THRESH:
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$01
	.byte	$02
	.byte	$02
	.byte	$01
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$02
	.byte	$03
	.byte	$03
	.byte	$02

.segment	"BSS"

_char_data:
	.res	16,$00
_PIX_WEIGHTS:
	.res	30,$00
_pix_cnt:
	.res	1,$00
_curr_word:
	.res	1,$00
_u:
	.res	1,$00
_v:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ terminal_init (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_terminal_init: near

.segment	"CODE"

	jsr     _terminal_set_tty
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ terminal_initial_position (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_terminal_initial_position: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     _TTYLoc
	stx     _TTYLoc+1
	ldx     #$00
	lda     #$64
	sta     _TTYLoc+2
	stx     _TTYLoc+2+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ terminal_set_tty (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_terminal_set_tty: near

.segment	"CODE"

	jsr     _screen_clear
	ldx     #$00
	lda     #$01
	sta     _TTY
	stx     _TTY+1
	ldx     #$00
	lda     #$00
	sta     _ModeBold
	stx     _ModeBold+1
	ldx     #$00
	lda     #$00
	sta     _Rotate
	stx     _Rotate+1
	ldx     #$00
	lda     #$00
	sta     _Reverse
	stx     _Reverse+1
	ldx     #$00
	lda     #$00
	sta     _CurMem
	stx     _CurMem+1
	ldx     #$00
	lda     #$00
	sta     _CurMode
	stx     _CurMode+1
	ldx     #$00
	lda     #$08
	sta     _CharWide
	ldx     #$00
	lda     #$10
	sta     _CharHigh
	ldx     #$00
	lda     #$00
	sta     _TTYLoc
	stx     _TTYLoc+1
	ldx     #$01
	lda     #$EF
	sta     _TTYLoc+2
	stx     _TTYLoc+2+1
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ terminal_set_plato (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_terminal_set_plato: near

.segment	"CODE"

	ldx     #$00
	lda     #$00
	sta     _TTY
	stx     _TTY+1
	jsr     _screen_clear
	ldx     #$00
	lda     #$08
	sta     _CharWide
	ldx     #$00
	lda     #$10
	sta     _CharHigh
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ terminal_char_load (signed short, signed short *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_terminal_char_load: near

.segment	"CODE"

	jsr     pushax
	lda     #<(_char_data)
	ldx     #>(_char_data)
	jsr     pushax
	ldx     #$00
	lda     #$10
	jsr     __bzero
	lda     #<(_PIX_WEIGHTS)
	ldx     #>(_PIX_WEIGHTS)
	jsr     pushax
	ldx     #$00
	lda     #$1E
	jsr     __bzero
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tosaddax
	jsr     aslax1
	clc
	adc     #<(_fontm23)
	tay
	txa
	adc     #>(_fontm23)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     __bzero
	ldx     #$00
	lda     #$00
	sta     _pix_cnt
	ldx     #$00
	lda     #$00
	sta     _curr_word
L009C:	ldx     #$00
	lda     _curr_word
	cmp     #$08
	jsr     boolult
	jne     L009F
	jmp     L009D
L009F:	ldx     #$00
	lda     #$10
	sta     _u
L00A4:	ldx     #$00
	lda     _u
	dec     _u
	cmp     #$00
	jsr     boolne
	jne     L00A7
	jmp     L009E
L00A6:	jmp     L00A4
L00A7:	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     _curr_word
	jsr     aslax1
	jsr     tosaddax
	ldy     #$01
	jsr     ldaxidx
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldx     #$00
	lda     _u
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jeq     L00AB
	ldx     #$00
	lda     _pix_cnt
	inc     _pix_cnt
	lda     #<(_TAB_0_5)
	ldx     #>(_TAB_0_5)
	clc
	adc     _u
	bcc     L00B3
	inx
L00B3:	ldy     #$00
	jsr     ldauidx
	clc
	adc     #<(_TAB_0_25)
	tay
	txa
	adc     #>(_TAB_0_25)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	lda     #<(_TAB_0_4)
	ldx     #>(_TAB_0_4)
	clc
	adc     _curr_word
	bcc     L00B5
	inx
L00B5:	ldy     #$00
	jsr     ldauidx
	jsr     tosaddax
	clc
	adc     #<(_PIX_WEIGHTS)
	tay
	txa
	adc     #>(_PIX_WEIGHTS)
	tax
	tya
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	pha
	clc
	adc     #$01
	ldy     #$00
	jsr     staspidx
	pla
	ldx     #$00
	lda     _u
	eor     #$0F
	clc
	adc     #<(_char_data)
	tay
	txa
	adc     #>(_char_data)
	tax
	tya
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	lda     #<(_BTAB)
	ldx     #>(_BTAB)
	clc
	adc     _curr_word
	bcc     L00BA
	inx
L00BA:	ldy     #$00
	jsr     ldauidx
	jsr     tosorax
	ldy     #$00
	jsr     staspidx
L00AB:	jmp     L00A6
L009E:	ldx     #$00
	lda     _curr_word
	inc     _curr_word
	jmp     L009C
L009D:	ldx     #$00
	lda     #$36
	jsr     pushax
	ldx     #$00
	lda     _pix_cnt
	jsr     tosuleax
	jeq     L00BE
	ldx     #$00
	lda     _pix_cnt
	cmp     #$55
	jsr     boolult
	jne     L00BC
L00BE:	ldx     #$00
	lda     #$00
	jeq     L00C0
L00BC:	ldx     #$00
	lda     #$01
L00C0:	jeq     L00BB
	ldx     #$00
	lda     #$06
	sta     _u
L00C1:	ldx     #$00
	lda     _u
	dec     _u
	cmp     #$00
	jsr     boolne
	jne     L00C4
	jmp     L00C2
L00C3:	jmp     L00C1
L00C4:	ldx     #$00
	lda     #$05
	sta     _v
L00C8:	ldx     #$00
	lda     _v
	dec     _v
	cmp     #$00
	jsr     boolne
	jne     L00CB
	jmp     L00C9
L00CA:	jmp     L00C8
L00CB:	lda     #<(_TAB_0_25)
	ldx     #>(_TAB_0_25)
	clc
	adc     _u
	bcc     L00D3
	inx
L00D3:	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldx     #$00
	lda     _v
	jsr     tosaddax
	clc
	adc     #<(_PIX_WEIGHTS)
	tay
	txa
	adc     #>(_PIX_WEIGHTS)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	lda     #<(_TAB_0_25)
	ldx     #>(_TAB_0_25)
	clc
	adc     _u
	bcc     L00D6
	inx
L00D6:	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldx     #$00
	lda     _v
	jsr     tosaddax
	clc
	adc     #<(_PIX_THRESH)
	tay
	txa
	adc     #>(_PIX_THRESH)
	tax
	tya
	ldy     #$00
	jsr     ldauidx
	jsr     tosugeax
	jeq     L00CF
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tosaddax
	jsr     aslax1
	jsr     pushax
	ldx     #$00
	lda     _u
	jsr     tosaddax
	clc
	adc     #<(_fontm23)
	tay
	txa
	adc     #>(_fontm23)
	tax
	tya
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	lda     #<(_BTAB)
	ldx     #>(_BTAB)
	clc
	adc     _v
	bcc     L00DE
	inx
L00DE:	ldy     #$00
	jsr     ldauidx
	jsr     tosorax
	ldy     #$00
	jsr     staspidx
L00CF:	jmp     L00CA
L00C9:	jmp     L00C3
L00C2:	jmp     L010B
L00BB:	ldx     #$00
	lda     _pix_cnt
	cmp     #$36
	jsr     boolult
	jne     L00E1
	ldx     #$00
	lda     _pix_cnt
	cmp     #$55
	lda     #$00
	ldx     #$00
	rol     a
	jne     L00E1
	ldx     #$00
	lda     #$00
	jeq     L00E4
L00E1:	ldx     #$00
	lda     #$01
L00E4:	jeq     L010B
	ldx     #$00
	lda     #$10
	sta     _u
L00E5:	ldx     #$00
	lda     _u
	dec     _u
	cmp     #$00
	jsr     boolne
	jne     L00E8
	jmp     L00E6
L00E7:	jmp     L00E5
L00E8:	ldx     #$00
	lda     _pix_cnt
	cmp     #$55
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L00EC
	lda     #<(_char_data)
	ldx     #>(_char_data)
	clc
	adc     _u
	bcc     L00F0
	inx
L00F0:	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	eor     #$FF
	ldy     #$00
	jsr     staspidx
L00EC:	ldx     #$00
	lda     #$08
	sta     _v
L00F2:	ldx     #$00
	lda     _v
	dec     _v
	cmp     #$00
	jsr     boolne
	jne     L00F5
	jmp     L00F3
L00F4:	jmp     L00F2
L00F5:	lda     #<(_char_data)
	ldx     #>(_char_data)
	clc
	adc     _u
	bcc     L00FC
	inx
L00FC:	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     pushax
	ldx     #$00
	lda     _v
	jsr     tosaslax
	jsr     tosandax
	stx     tmp1
	ora     tmp1
	jeq     L00F9
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tosaddax
	jsr     aslax1
	jsr     pushax
	lda     #<(_TAB_0_5i)
	ldx     #>(_TAB_0_5i)
	clc
	adc     _u
	bcc     L0104
	inx
L0104:	ldy     #$00
	jsr     ldauidx
	jsr     tosaddax
	clc
	adc     #<(_fontm23)
	tay
	txa
	adc     #>(_fontm23)
	tax
	tya
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	lda     #<(_BTAB_5)
	ldx     #>(_BTAB_5)
	clc
	adc     _v
	bcc     L0107
	inx
L0107:	ldy     #$00
	jsr     ldauidx
	jsr     tosorax
	ldy     #$00
	jsr     staspidx
L00F9:	jmp     L00F4
L00F3:	jmp     L00E7
L00E6:	ldx     #$00
	lda     _pix_cnt
	cmp     #$55
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L010B
	ldx     #$00
	lda     #$06
	sta     _u
L010A:	ldx     #$00
	lda     _u
	dec     _u
	cmp     #$00
	jsr     boolne
	jne     L010D
	jmp     L010B
L010C:	jmp     L010A
L010D:	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tosaddax
	jsr     aslax1
	jsr     pushax
	ldx     #$00
	lda     _u
	jsr     tosaddax
	clc
	adc     #<(_fontm23)
	tay
	txa
	adc     #>(_fontm23)
	tax
	tya
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	eor     #$FF
	ldy     #$00
	jsr     staspidx
	ldy     #$03
	jsr     ldaxysp
	jsr     aslax1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     tosaddax
	jsr     aslax1
	jsr     pushax
	ldx     #$00
	lda     _u
	jsr     tosaddax
	clc
	adc     #<(_fontm23)
	tay
	txa
	adc     #>(_fontm23)
	tax
	tya
	jsr     pushax
	ldy     #$00
	jsr     ldauidx
	and     #$F8
	ldy     #$00
	jsr     staspidx
	jmp     L010C
L010B:	jsr     incsp4
	rts

.endproc

